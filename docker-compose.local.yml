version: "3.7"

volumes:
  postgres_data:

services:

  # # ==================================== 
  # # Apps
  # # ==================================== 
  ory_hooks:
    build: ./oryhooks
    restart: always
    environment:
      - EJABBERD_ROOT=${EJABBERD_ROOT}
      - ADMIN_JID=${ADMIN_JID}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - APP_PORT=${ORY_HOOKS_APP_PORT}
    ports:
      - ${ORY_HOOKS_APP_PORT}:${ORY_HOOKS_APP_PORT}
    depends_on:
      ejabberd:
        condition: service_started

  kratos_proxy:
    image: shanart/m-kratos-forms-proxy:latest
    restart: on-failure
    ports:
      - ${KRATOS_PROXY_PORT}:${KRATOS_PROXY_PORT}
    environment:
      - PORT=${KRATOS_PROXY_PORT}
      - KRATOS_URL=${KRATOS_URL}
    depends_on:
      - kratos

  profile:
    build: ./profile
    restart: on-failure
    ports:
      - ${PROFILE_SERVICE_PORT}:${PROFILE_SERVICE_PORT}
    environment:
      - APP_PORT=${PROFILE_SERVICE_PORT}
      - EJABBERD_DATABASE_URL=${PSQL_EJABBERD_DATABASE_URL}
      - EJABBERD_API_URL=${EJABBERD_ROOT}
      - ADMIN_JID=${ADMIN_JID}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - KRATOS_URL=${KRATOS_URL}
    depends_on:
      postgres:
        condition: service_healthy

  # # ==================================== 
  # # INFRASTRUCTURE
  # # ==================================== 
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=${DATABASE_KRATOS},${DATABASE_EJABBERD}
    ports:
      - 5432:5432
    volumes:
      - ./configs/db/:/docker-entrypoint-initdb.d/
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Ejabberd server
  # Main part of the application that will handle all user comunication
  ejabberd:
    image: ejabberd/ecs
    restart: on-failure
    container_name: ejabberdcore
    ports:
      - 5222:5222 # client to server
      - 5280:5280 # web console
      # - websocket
    environment:
      - CTL_ON_CREATE=register ${ADMIN_USERNAME} localhost ${ADMIN_PASSWORD}
      # - CTL_ON_START=register admin localhost password ;
      #                check_password admin localhost password ;
      #                status
    volumes:
      - ./configs/ejabberd/ejabberd.yml:/home/ejabberd/conf/ejabberd.yml
    depends_on:
      migrate_ejabberd_db:
        condition: service_completed_successfully

  # Migration task. Create schema in the database before ejabberd starts
  migrate_ejabberd_db:
    build: ./configs/migrate_ejabberd_db
    environment:
      - DB_HOST=${DATABASE_HOST}
      - DB_NAME=${DATABASE_EJABBERD}
      - DB_USER=${DATABASE_USER}
      - PGPASSWORD=${DATABASE_PASSWORD}
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy

  # # Kratos
  kratos-migrate:
    image: oryd/kratos:v1.0.0
    environment:
      - DSN=${DSN}
    volumes:
      - ./configs/kratos:/etc/config/kratos
    command: -c /etc/config/kratos/kratos.yml migrate sql -e --yes
    depends_on:
      postgres:
        condition: service_healthy

  kratos:
    image: oryd/kratos:v1.0.0
    environment:
      - SELFSERVICE_METHODS_OIDC_CONFIG_PROVIDERS_0_CLIENT_ID=${SELFSERVICE_METHODS_OIDC_CONFIG_PROVIDERS_0_CLIENT_ID}
      - SELFSERVICE_METHODS_OIDC_CONFIG_PROVIDERS_0_CLIENT_SECRET=${SELFSERVICE_METHODS_OIDC_CONFIG_PROVIDERS_0_CLIENT_SECRET}
      - DSN=${DSN}
      - COURIER_SMTP_CONNECTION_URI=${COURIER_SMTP_CONNECTION_URI}
    ports:
      - "4433:4433"
      - "4434:4434"
    volumes:
      - ./configs/kratos:/etc/config/kratos
    command: serve -c /etc/config/kratos/kratos.yml --dev --watch-courier
    depends_on:
      postgres:
        condition: service_healthy

    # Oathkeeper
  oathkeeper:
    image: oryd/oathkeeper:v0.40
    ports:
      - 8080:4455
      - 4456:4456
    command: serve proxy -c "/etc/config/oathkeeper/oathkeeper.yml"
    environment:
      - LOG_LEVEL=debug
    restart: on-failure
    volumes:
      - ./configs/oathkeeper:/etc/config/oathkeeper
