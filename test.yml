name: chatapp
services:
  ejabberd:
    container_name: ejabberdcore
    depends_on:
      migrate_ejabberd_db:
        condition: service_completed_successfully
        required: true
    environment:
      CTL_ON_CREATE: register admin localhost a0sdf9un0a49unf
    image: ejabberd/ecs
    networks:
      default: null
    ports:
    - mode: ingress
      target: 5222
      published: "5222"
      protocol: tcp
    - mode: ingress
      target: 5280
      published: "5280"
      protocol: tcp
    restart: on-failure
    volumes:
    - type: bind
      source: /home/alex/projects/ChatApp/configs/ejabberd/ejabberd.yml
      target: /home/ejabberd/conf/ejabberd.yml
      bind:
        create_host_path: true
  kratos:
    command:
    - serve
    - -c
    - /etc/config/kratos/kratos.yml
    - --dev
    - --watch-courier
    depends_on:
      postgres:
        condition: service_healthy
        required: true
    environment:
      COURIER_SMTP_CONNECTION_URI: smtp://70eea8bdd520e8:cbb16981743f88@sandbox.smtp.mailtrap.io:2525
      DSN: postgres://user:password@postgres:5432/kratos?sslmode=disable&max_conns=20&max_idle_conns=4
      SELFSERVICE_METHODS_OIDC_CONFIG_PROVIDERS_0_CLIENT_ID: 203794841053-ej6d6p8thk2vq1ahlun07kb6n5nnp4ho.apps.googleusercontent.com
      SELFSERVICE_METHODS_OIDC_CONFIG_PROVIDERS_0_CLIENT_SECRET: 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
    image: oryd/kratos:v1.0.0
    networks:
      default: null
    ports:
    - mode: ingress
      target: 4433
      published: "4433"
      protocol: tcp
    - mode: ingress
      target: 4434
      published: "4434"
      protocol: tcp
    volumes:
    - type: bind
      source: /home/alex/projects/ChatApp/configs/kratos
      target: /etc/config/kratos
      bind:
        create_host_path: true
  kratos-migrate:
    command:
    - -c
    - /etc/config/kratos/kratos.yml
    - migrate
    - sql
    - -e
    - --yes
    depends_on:
      postgres:
        condition: service_healthy
        required: true
    environment:
      DSN: postgres://user:password@postgres:5432/kratos?sslmode=disable&max_conns=20&max_idle_conns=4
    image: oryd/kratos:v1.0.0
    networks:
      default: null
    volumes:
    - type: bind
      source: /home/alex/projects/ChatApp/configs/kratos
      target: /etc/config/kratos
      bind:
        create_host_path: true
  kratos_proxy:
    depends_on:
      kratos:
        condition: service_started
        required: true
    environment:
      KRATOS_URL: http://kratos:4433
      PORT: "8000"
    image: shanart/m-kratos-forms-proxy:latest
    networks:
      default: null
    ports:
    - mode: ingress
      target: 8000
      published: "8000"
      protocol: tcp
    restart: on-failure
  migrate_ejabberd_db:
    build:
      context: /home/alex/projects/ChatApp/configs/migrate_ejabberd_db
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
        required: true
    environment:
      DB_HOST: postgres
      DB_NAME: ejabberd
      DB_USER: user
      PGPASSWORD: password
    networks:
      default: null
    restart: on-failure
  oathkeeper:
    command:
    - serve
    - proxy
    - -c
    - /etc/config/oathkeeper/oathkeeper.yml
    environment:
      LOG_LEVEL: debug
    image: oryd/oathkeeper:v0.40
    networks:
      default: null
    ports:
    - mode: ingress
      target: 4455
      published: "8080"
      protocol: tcp
    - mode: ingress
      target: 4456
      published: "4456"
      protocol: tcp
    restart: on-failure
    volumes:
    - type: bind
      source: /home/alex/projects/ChatApp/configs/oathkeeper
      target: /etc/config/oathkeeper
      bind:
        create_host_path: true
  ory_hooks:
    build:
      context: /home/alex/projects/ChatApp/oryhooks
      dockerfile: Dockerfile
    depends_on:
      ejabberd:
        condition: service_started
        required: true
    environment:
      ADMIN_JID: admin@localhost
      ADMIN_PASSWORD: a0sdf9un0a49unf
      APP_PORT: "8081"
      EJABBERD_ROOT: http://ejabberd:5280
    networks:
      default: null
    ports:
    - mode: ingress
      target: 8081
      published: "8081"
      protocol: tcp
    restart: always
  postgres:
    environment:
      POSTGRES_MULTIPLE_DATABASES: kratos,ejabberd
      POSTGRES_PASSWORD: password
      POSTGRES_USER: user
    healthcheck:
      test:
      - CMD-SHELL
      - pg_isready -U user
      timeout: 5s
      interval: 5s
      retries: 5
    image: postgres:15
    networks:
      default: null
    ports:
    - mode: ingress
      target: 5432
      published: "5432"
      protocol: tcp
    volumes:
    - type: bind
      source: /home/alex/projects/ChatApp/configs/db
      target: /docker-entrypoint-initdb.d
      bind:
        create_host_path: true
    - type: volume
      source: postgres_data
      target: /var/lib/postgresql/data
      volume: {}
networks:
  default:
    name: chatapp_default
volumes:
  postgres_data:
    name: chatapp_postgres_data
